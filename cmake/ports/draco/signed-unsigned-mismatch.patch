diff --git a/src/draco/mesh/mesh.h b/src/draco/mesh/mesh.h
index b8ca535..024d4e6 100644
--- a/src/draco/mesh/mesh.h
+++ b/src/draco/mesh/mesh.h
@@ -93,7 +93,7 @@ class Mesh : public PointCloud {
 
   // Returns the point id of for a corner |ci|.
   inline PointIndex CornerToPointId(int ci) const {
-    if (ci == kInvalidCornerIndex.value())
+    if ((uint32_t)ci == kInvalidCornerIndex.value())
       return kInvalidPointIndex;
     return this->face(FaceIndex(ci / 3))[ci % 3];
   }
diff --git a/src/draco/metadata/geometry_metadata.h b/src/draco/metadata/geometry_metadata.h
index 9f668f7..3c6e6a9 100644
--- a/src/draco/metadata/geometry_metadata.h
+++ b/src/draco/metadata/geometry_metadata.h
@@ -65,7 +65,7 @@ class GeometryMetadata : public Metadata {
   void DeleteAttributeMetadataByUniqueId(int32_t att_unique_id) {
     for (auto itr = att_metadatas_.begin(); itr != att_metadatas_.end();
          ++itr) {
-      if (itr->get()->att_unique_id() == att_unique_id) {
+      if (itr->get()->att_unique_id() == (uint32_t)att_unique_id) {
         att_metadatas_.erase(itr);
         return;
       }
@@ -77,7 +77,7 @@ class GeometryMetadata : public Metadata {
     // TODO(draco-eng): Consider using unordered_map instead of vector to store
     // attribute metadata.
     for (auto &&att_metadata : att_metadatas_) {
-      if (att_metadata->att_unique_id() == att_unique_id) {
+      if (att_metadata->att_unique_id() == (uint32_t)att_unique_id) {
         return att_metadata.get();
       }
     }
@@ -88,7 +88,7 @@ class GeometryMetadata : public Metadata {
     // TODO(draco-eng): Consider use unordered_map instead of vector to store
     // attribute metadata.
     for (auto &&att_metadata : att_metadatas_) {
-      if (att_metadata->att_unique_id() == att_unique_id) {
+      if (att_metadata->att_unique_id() == (uint32_t)att_unique_id) {
         return att_metadata.get();
       }
     }
