# this file deploy to production
# please be careful not to run this by accident!

.deploy:
    extends: .production
    when: manual
    allow_failure: false

# sentry release:
#     stage: deploy
#     image: getsentry/sentry-cli

#     extends: .deploy
#     variables:
#         # SENTRY_AUTH_TOKEN
#         SENTRY_ORG: tivolicloud

#     script:
#         - sentry-cli releases new -p interface $CI_COMMIT_TAG
#         - sentry-cli releases set-commits --auto $CI_COMMIT_TAG

pages:
    stage: deploy
    image: node:latest

    # extends: .deploy

    needs: []

    script:
        - cd tools/jsdoc
        - npm install
        - BUILD_VERSION=0.17.3 npm run build
        - mv out ../../public

    artifacts:
        paths:
            - public

# apidocs:
#     stage: deploy
#     image: alpine:latest

#     extends: .deploy

#     needs: []

#     variables:
#         S3_BUCKET: apidocs.tivolicloud.com
#         S3_REGION: us-east-1
#         # AWS_ACCESS_KEY_ID
#         # AWS_SECRET_ACCESS_KEY

#     script:
#         - apk add nodejs rclone

#         - cd tools/jsdoc
#         - npm install
#         - BUILD_VERSION=$CI_COMMIT_TAG npm run build

#         # init rclone config
#         - mkdir -p ~/.config/rclone
#         - echo "[s3]" > ~/.config/rclone/rclone.conf
#         - echo "type = s3" >> ~/.config/rclone/rclone.conf
#         - echo "provider = AWS" >> ~/.config/rclone/rclone.conf
#         - echo "env_auth = true" >> ~/.config/rclone/rclone.conf
#         - echo "region = $S3_REGION" >> ~/.config/rclone/rclone.conf
#         - echo "acl = private" >> ~/.config/rclone/rclone.conf

#         # upload content
#         - cd out
#         - rclone sync -P . s3:$S3_BUCKET

upload server:
    stage: deploy
    image: docker:latest

    extends: .deploy

    needs:
        - job: all linux
          artifacts: true

    variables:
        DOCKER_TLS_CERTDIR: ""

    services:
        - docker:dind

    script:
        - docker system info
        - docker image ls
        - cd docker

        # server
        - cd server
        - mkdir -p dist

        - mv ../../build/server.AppDir dist
        - cp ecosystem.config.js dist
        - cp auto-updater.js dist

        - docker build -t $CI_REGISTRY_IMAGE/server:$CI_COMMIT_TAG-amd64 .
        - docker image ls
        - cd ..

        # ice server
        - cd ice-server
        - mkdir -p dist

        - mv ../../build/ice-server.AppDir dist

        - docker build -t $CI_REGISTRY_IMAGE/ice-server:latest .
        - docker image ls
        - cd ..

        # publish server and ice server to our registry
        - docker login $CI_REGISTRY --username gitlab-ci-token --password $CI_JOB_TOKEN
        - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_TAG-amd64
        - docker push $CI_REGISTRY_IMAGE/ice-server:latest

upload server arm64:
    stage: deploy
    image: docker:latest
    tags:
        - arm64

    extends: .deploy

    needs:
        - job: server linux arm64
          artifacts: true

    variables:
        DOCKER_TLS_CERTDIR: ""

    services:
        - docker:dind

    script:
        - docker system info
        - docker image ls
        - cd docker

        # server
        - cd server
        - mkdir -p dist

        - mv ../../build/server.AppDir dist
        - cp ecosystem.config.js dist
        - cp auto-updater.js dist

        - docker build -t $CI_REGISTRY_IMAGE/server:$CI_COMMIT_TAG-arm64 .
        - docker image ls
        - cd ..

        # publish server to our registry
        - docker login $CI_REGISTRY --username gitlab-ci-token --password $CI_JOB_TOKEN
        - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_TAG-arm64

# upload launcher:
#     stage: deploy
#     image: google/cloud-sdk:alpine

#     extends: .deploy

#     needs:
#         - job: launcher windows
#           artifacts: true
#         - job: launcher macos
#           artifacts: true
#         - job: launcher linux
#           artifacts: true

#     script:
#         - gcloud auth activate-service-account --key-file $GCP_AUTH_JSON

#         - cd launcher/dist
#         - gsutil cp
#           *.exe
#           *.dmg *.zip
#           *.AppImage *.deb *.pacman
#           *.yml *.blockmap
#           gs://tivolicloud-cdn/releases

#         - gcloud compute url-maps invalidate-cdn-cache tivolicloud-cdn
#           --path "/releases/*"

upload launcher:
    stage: deploy
    image:
        name: banst/awscli
        entrypoint: [""]

    extends: .deploy

    needs:
        - job: launcher windows
          artifacts: true
        - job: launcher macos
          artifacts: true
        - job: launcher linux
          artifacts: true

    variables:
        S3_BUCKET: tivolicloud
        S3_REGION: us-east-1
        CLOUDFRONT_ID: E14KDGO1BZG0J3
        # AWS_ACCESS_KEY_ID
        # AWS_SECRET_ACCESS_KEY

    script:
        - aws configure set region $S3_REGION

        - cd launcher/dist
        - aws s3 cp . s3://$S3_BUCKET/releases/ --recursive --exclude "*"
          --include "*.exe"
          --include "*.dmg" --include "*.zip"
          --include "*.AppImage" --include "*.deb" --include "*.pacman"
          --include "*.yml" --include "*.blockmap"

        - aws cloudfront create-invalidation
          --distribution-id $CLOUDFRONT_ID
          --paths "/releases/*"
